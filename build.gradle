//apply from: "https://gradle.avaldigitallabs.com/resources/java-serenity-project.gradle"
group 'qa'
version '1.0-SNAPSHOT'
repositories {
    mavenLocal()
    jcenter()
}
buildscript {
    repositories {
        mavenLocal()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("net.serenity-bdd:serenity-gradle-plugin:2.0.49")
        classpath("gradle.plugin.com.github.sherter.google-java-format:google-java-format-gradle-plugin:0.8")
        //classpath ("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.7")
    }
}

//apply plugin: 'org.sonarqube'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'com.github.sherter.google-java-format'
apply plugin: 'net.serenity-bdd.aggregator'
configurations {
    jaxb
}
task genJaxb {
    ext.sourcesDir = "${buildDir}/generated-sources/jaxb"
    ext.classesDir = "${buildDir}/classes/jaxb"
    ext.schema = "http://www.dneonline.com/calculator.asmx?wsdl"

    outputs.dir classesDir

    doLast() {
        project.ant {
            taskdef name: "xjc", classname: "com.sun.tools.xjc.XJCTask",
                    classpath: configurations.jaxb.asPath
            mkdir(dir: sourcesDir)
            mkdir(dir: classesDir)

            xjc(destdir: sourcesDir, schema: schema,
                    package: "com.example.consumingwebservice.wsdl") {
                arg(value: "-wsdl")
                produces(dir: sourcesDir, includes: "**/*.java")
            }

            javac(destdir: classesDir, source: 1.8, target: 1.8, debug: true,
                    debugLevel: "lines,vars,source",
                    classpath: configurations.jaxb.asPath) {
                src(path: sourcesDir)
                include(name: "**/*.java")
                include(name: "*.java")

            }

            copy(todir: "src/main/java/com/training/adl/api") {
                fileset(dir: sourcesDir, erroronmissingdir: false) {
                    exclude(name: "**/*.class")

                }
            }
        }
    }
}
ext{
    serenity_version = "2.2.8"
    serenity_cucumber_version = "1.9.33"
    serenity_cucumber5_version = "2.2.5"
}
dependencies {
    compile localGroovy()
    compile "net.serenity-bdd:serenity-core:$serenity_version"
    compile "net.serenity-bdd:serenity-junit:$serenity_version"
    compile "io.cucumber:cucumber-java:5.7.0"
    compile "io.cucumber:cucumber-junit:5.7.0"
    compile "net.serenity-bdd:serenity-screenplay:$serenity_version"
    compile "net.serenity-bdd:serenity-screenplay-webdriver:$serenity_version"
    compile "net.serenity-bdd:serenity-emailer:2.1.0"
    compile "net.serenity-bdd:serenity-screenplay-rest:$serenity_version"
    compile "net.serenity-bdd:serenity-cucumber5:$serenity_cucumber5_version"
    compile "net.serenity-bdd:serenity-junit:$serenity_version"

    /*Persistence*/
    compile "org.hibernate:hibernate-core:5.4.10.Final"
    compile "javax.persistence:javax.persistence-api:2.2"
    compile "com.zaxxer:HikariCP:3.4.2"

    implementation "mysql:mysql-connector-java:8.0.19"
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.10.0'
    implementation 'com.fasterxml.jackson.module:jackson-module-parameter-names:2.10.0'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.10.0'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.10.0'
    implementation 'com.github.javafaker:javafaker:1.0.2'
    implementation 'redis.clients:jedis:3.1.0'
    implementation 'biz.paluch.redis:lettuce:3.2.Final'
    testCompile 'org.slf4j:slf4j-simple:1.7.7'
    testCompile 'junit:junit:4.12'
    testCompile 'org.assertj:assertj-core:1.7.0'
    compile 'io.rest-assured:json-schema-validator:3.0.3'
    implementation 'org.glassfish.jaxb:jaxb-runtime'
    compile(files(genJaxb.classesDir).builtBy(genJaxb))
    jaxb "com.sun.xml.bind:jaxb-xjc:2.1.7"
    /* Lombok */
    compileOnly 'org.projectlombok:lombok:1.18.10'
    annotationProcessor 'org.projectlombok:lombok:1.18.10'


}

test {

    testLogging {
        showStandardStreams = true
    }
    testLogging.showStandardStreams = true
    gradle.startParameter.continueOnFailure = true
    /* Pass all system properties: */
    systemProperties System.getProperties()
    test.finalizedBy(aggregate)
}
version = '1.0-SNAPSHOT'
description = 'ADL Training - SOAP - test cases'
sourceCompatibility = '1.8'
//gradle.startParameter.excludedTaskNames += "genJaxb"
